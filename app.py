import streamlit as st
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
import random

# H√†m t·∫°o d·ªØ li·ªáu ng·∫´u nhi√™n cho t·ª´ng s·∫£n ph·∫©m
def generate_random_data_for_product(product_name):
    return {
        "S·ªë sao": round(random.uniform(1, 5), 1),
        "S·ªë ƒë√°nh gi√°": random.randint(1000, 20000),
        "Gi√° ti√™u chu·∫©n": random.randint(100_000, 10_000_000),
        "Gi√° cao nh·∫•t": random.randint(100_000, 15_000_000),
        "Nh√† s·∫£n xu·∫•t": random.choice(["C√¥ng ty A", "C√¥ng ty B", "C√¥ng ty C", "C√¥ng ty D"]),
        "Phi√™n b·∫£n": f"{random.randint(1, 15)}.{random.randint(0, 9)}.{random.randint(0, 9)}"
    }

# C·∫•u h√¨nh ·ª©ng d·ª•ng
st.set_page_config(page_title="H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m", layout="wide")

st.markdown(
    """
    <style>
    .main { background-color: #f8faff; font-family: 'Arial', sans-serif; }
    .stButton>button { margin-top: 10px; background-color: #007bff; color: white; border-radius: 5px; padding: 5px 10px; border: none; }
    .stButton>button:hover { background-color: #0056b3; }
    .product-card { padding: 15px; background: white; border: 1px solid #ddd; border-radius: 8px; margin-bottom: 10px; }
    .product-header { font-weight: bold; font-size: 18px; margin-bottom: 5px; }
    .product-info { font-size: 14px; margin-bottom: 5px; color: #555; }
    .pagination { margin-top: 20px; text-align: center; }
    .pagination button { background-color: #007bff; color: white; border-radius: 5px; padding: 5px 15px; border: none; margin: 0 5px; }
    .pagination button:hover { background-color: #0056b3; }
    .product-similar { margin: 20px 0; }
    .back-button { margin-top: 15px; }
    </style>
    """,
    unsafe_allow_html=True
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üéØ H·ªá th·ªëng g·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±")
st.markdown("#### Xem chi ti·∫øt s·∫£n ph·∫©m v√† g·ª£i √Ω t∆∞∆°ng t·ª±")

try:
    # ƒê∆∞·ªùng d·∫´n file
    file_path = r"E:\TTNT\Project\sampled_item_features.xlsx"
    df = pd.read_excel(file_path)

    # ƒê·ªïi t√™n c·ªôt
    df.rename(columns={"unique_product_names": "T√™n s·∫£n ph·∫©m"}, inplace=True)

    # Ki·ªÉm tra v√† l∆∞u d·ªØ li·ªáu ng·∫´u nhi√™n trong Session State
    if "product_data" not in st.session_state:
        st.session_state["product_data"] = {
            product: generate_random_data_for_product(product)
            for product in df["T√™n s·∫£n ph·∫©m"]
        }

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    scaler = MinMaxScaler()
    scaled_features = scaler.fit_transform(df.select_dtypes(include=["float64", "int64"]))
    similarity_matrix = cosine_similarity(scaled_features)

    similarity_df = pd.DataFrame(
        similarity_matrix,
        index=df["T√™n s·∫£n ph·∫©m"],
        columns=df["T√™n s·∫£n ph·∫©m"]
    )

    # S·ªë s·∫£n ph·∫©m m·ªói trang
    products_per_page = 10
    total_pages = (len(df) - 1) // products_per_page + 1

    if "selected_product" not in st.session_state:
        st.session_state["selected_product"] = None
    if "current_page" not in st.session_state:
        st.session_state["current_page"] = 1

    if st.session_state["selected_product"] is None:
        st.subheader("üìã Danh s√°ch s·∫£n ph·∫©m:")

        # Ph√¢n trang
        start_idx = (st.session_state["current_page"] - 1) * products_per_page
        end_idx = start_idx + products_per_page
        current_products = df.iloc[start_idx:end_idx]

        # Hi·ªÉn th·ªã s·∫£n ph·∫©m tr√™n trang hi·ªán t·∫°i
        for _, row in current_products.iterrows():
            with st.container():
                st.markdown(
                    f"""
                    <div class="product-card">
                        <div class="product-header">{row['T√™n s·∫£n ph·∫©m']}</div>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )
                if st.button("Xem s·∫£n ph·∫©m", key=row["T√™n s·∫£n ph·∫©m"]):
                    st.session_state["selected_product"] = row["T√™n s·∫£n ph·∫©m"]

        # ƒêi·ªÅu h∆∞·ªõng ph√¢n trang
        st.markdown("<div class='pagination'>", unsafe_allow_html=True)
        if st.button("‚¨ÖÔ∏è Trang tr∆∞·ªõc") and st.session_state["current_page"] > 1:
            st.session_state["current_page"] -= 1
        st.write(f"Trang {st.session_state['current_page']} / {total_pages}")
        if st.button("‚û°Ô∏è Trang sau") and st.session_state["current_page"] < total_pages:
            st.session_state["current_page"] += 1
        st.markdown("</div>", unsafe_allow_html=True)

    else:
        selected_product = st.session_state["selected_product"]
        st.subheader(f"üìå Chi ti·∫øt s·∫£n ph·∫©m: **{selected_product}**")

        # L·∫•y th√¥ng tin c·ªë ƒë·ªãnh t·ª´ Session State
        product_info = st.session_state["product_data"][selected_product]
        st.markdown(
            f"""
            <div class="product-card">
                <p class="product-info"><b>S·ªë sao:</b> {product_info['S·ªë sao']}</p>
                <p class="product-info"><b>S·ªë ƒë√°nh gi√°:</b> {product_info['S·ªë ƒë√°nh gi√°']}</p>
                <p class="product-info"><b>Gi√° ti√™u chu·∫©n:</b> {product_info['Gi√° ti√™u chu·∫©n']:,} VNƒê</p>
                <p class="product-info"><b>Gi√° cao nh·∫•t:</b> {product_info['Gi√° cao nh·∫•t']:,} VNƒê</p>
                <p class="product-info"><b>Nh√† s·∫£n xu·∫•t:</b> {product_info['Nh√† s·∫£n xu·∫•t']}</p>
                <p class="product-info"><b>Phi√™n b·∫£n:</b> {product_info['Phi√™n b·∫£n']}</p>
            </div>
            """,
            unsafe_allow_html=True,
        )

        # Hi·ªÉn th·ªã s·∫£n ph·∫©m g·ª£i √Ω
        st.subheader("üìå G·ª£i √Ω s·∫£n ph·∫©m t∆∞∆°ng t·ª±:")
        similar_products = similarity_df.loc[selected_product].sort_values(ascending=False).iloc[1:6]
        for product_name, similarity_score in similar_products.items():
            st.markdown(
                f"""
                <div class="product-similar">
                    <p>{product_name} (ƒê·ªô t∆∞∆°ng ƒë·ªìng: {similarity_score:.4f})</p>
                </div>
                """,
                unsafe_allow_html=True,
            )
            if st.button("Xem s·∫£n ph·∫©m", key=product_name):
                st.session_state["selected_product"] = product_name

        if st.button("üîô Quay l·∫°i danh s√°ch s·∫£n ph·∫©m", key="back"):
            st.session_state["selected_product"] = None

except Exception as e:
    st.error(f"‚ö†Ô∏è L·ªói: {str(e)}")
